{"version":3,"sources":["test.js","test2.js","App.js","serviceWorker.js","index.js"],"names":["Component","ExceljsReact","state","data","downloadExcel","workbook","ExcelJS","Workbook","creator","lastModifiedBy","created","Date","modified","lastPrinted","worksheet","addWorksheet","views","xSplit","ySplit","columns","header","key","width","map","getCell","fill","type","pattern","fgColor","argb","bgColor","addRows","rowlast","lastRow","console","log","eachCell","includeEmpty","cell","colNumber","border","top","style","left","bottom","right","xlsx","writeBuffer","then","blob","Blob","fileName","Math","floor","saveAs","axios","get","res","setState","this","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAMuBA,Y,yCCqMRC,E,2MArMXC,MAAQ,CACJC,KAAM,I,EAoHZC,cAAgB,WACd,IAAIC,EAAW,IAAIC,IAAQC,SAE3BF,EAASG,QAAU,aACnBH,EAASI,eAAiB,aAC1BJ,EAASK,QAAU,IAAIC,KACvBN,EAASO,SAAW,IAAID,KACxBN,EAASQ,YAAc,IAAIF,KAE3B,IAAIG,EAAYT,EAASU,aAAa,gBACtCD,EAAUE,MAAQ,CAAC,CAAEd,MAAO,SAAUe,OAAQ,EAAGC,OAAQ,IACzDJ,EAAUK,QAAU,CAChB,CAAEC,OAAQ,cAAeC,IAAK,KAAMC,MAAO,IAC3C,CAAEF,OAAQ,uBAAwBC,IAAK,SAAUC,MAAO,IACxD,CAAEF,OAAQ,2BAA4BC,IAAK,QAASC,MAAO,IAC3D,CAAEF,OAAQ,wBAAyBC,IAAK,YAAaC,MAAO,KAGhE,CAAC,KAAM,KAAM,KAAM,MAAMC,KAAI,SAAAF,GACzBP,EAAUU,QAAQH,GAAKI,KAAO,CAC1BC,KAAM,UACNC,QAAQ,QACRC,QAAS,CAAEC,KAAM,YACjBC,QAAS,CAAED,KAAM,gBAkBzBf,EAAUiB,QAAQ,EAAK7B,MAAMC,MAE7B,IAAI6B,EAAUlB,EAAUmB,QACxBC,QAAQC,IAAIH,GACZA,EAAQI,SAAS,CAAEC,cAAc,IAAS,SAASC,EAAMC,GAEzCD,EAAKb,KAAO,CACRC,KAAM,UACNC,QAAQ,QACRC,QAAQ,CAAEC,KAAK,WAKvBS,EAAKE,OAAS,CACVC,IAAK,CAAEC,MAAO,QACdC,KAAM,CAAED,MAAO,QACfE,OAAQ,CAAEF,MAAO,QACjBG,MAAO,CAAEH,MAAO,YAMrBrC,EAASyC,KAAKC,cAAcC,MAAK,SAAS7C,GACnD,IAAI8C,EAAO,IAAIC,KAAK,CAAC/C,GAAO,CAC1BuB,KACE,sEAEAyB,EAAW,eAAiBC,KAAKC,MAAM,IAAI1C,KAAS,KAAQ,QAChE2C,iBAAOL,EAAME,O,mFAzFI,IAAD,OAWlBI,IAAMC,IAAI,8CACTR,MAAK,SAAAS,GACFvB,QAAQC,IAAIsB,GACZ,EAAKC,SAAS,CAACvD,KAAMsD,EAAItD,Y,+BAgF7B,OADE+B,QAAQC,IAAIwB,KAAKzD,OACZ,4BAAQ0D,QAASD,KAAKvD,eAAtB,gB,GAlMgBJ,a,MCSZ6D,MATf,WACE,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.8ad196fc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\r\nimport ReactTable from 'react-table';\r\nimport \"react-table/react-table.css\";\r\nimport { CSVLink } from \"react-csv\";\r\n \r\nclass ReactCSV extends Component {\r\n \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n \r\n    render() {\r\n        const headers = [\r\n          { label: \"First Name\", key: \"firstname\" },\r\n          { label: \"Last Name\", key: \"lastname\" },\r\n          { label: \"Email\", key: \"email\" }\r\n        ];\r\n         \r\n        const data = [\r\n          { firstname: \"Ahmed\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" },\r\n          { firstname: \"Raed\", lastname: \"Labes\", email: \"rl@smthing.co.com\" },\r\n          { firstname: \"Yezzi\", lastname: \"Min l3b\", email: \"ymin@cocococo.com\" }\r\n        ];\r\n\r\n        const columns = [\r\n            {\r\n            Header: 'First Name',\r\n            accessor: 'firstname' // String-based value accessors!\r\n           },\r\n           {\r\n            Header: 'Last Name',\r\n            accessor: 'lastname' // String-based value accessors!\r\n           },\r\n           {\r\n            Header: 'Email',\r\n            accessor: 'email' // String-based value accessors!\r\n           }\r\n        ];\r\n         \r\n        return (\r\n            <>\r\n        <CSVLink data={data} filename={\"my-file.csv\"} headers={headers}>\r\n          Download me\r\n        </CSVLink>\r\n        <ReactTable data={data} columns={columns}>\r\n        </ReactTable>\r\n        </>\r\n        ) \r\n    }\r\n}\r\n \r\nexport default ReactCSV;","import React, { Component } from \"react\";\r\nimport ExcelJS from \"exceljs\";\r\nimport { saveAs } from \"file-saver\";\r\nimport axios from 'axios';\r\n\r\nclass ExceljsReact extends Component {\r\n    state = {\r\n        data: []\r\n        // collectionDetails: [\r\n        //   {\r\n        //     wardNumber: 1,\r\n        //     totalPropertyUnits: 500,\r\n        //     noOfPropertiesCovered: 100,\r\n        //     collectionPer: 20,\r\n        //     segPer: 35\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 2,\r\n        //     totalPropertyUnits: 350,\r\n        //     noOfPropertiesCovered: 130,\r\n        //     collectionPer: 37,\r\n        //     segPer: 40\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 3,\r\n        //     totalPropertyUnits: 480,\r\n        //     noOfPropertiesCovered: 211,\r\n        //     collectionPer: 44,\r\n        //     segPer: 40\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 4,\r\n        //     totalPropertyUnits: 250,\r\n        //     noOfPropertiesCovered: 115,\r\n        //     collectionPer: 46,\r\n        //     segPer: 25\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 5,\r\n        //     totalPropertyUnits: 300,\r\n        //     noOfPropertiesCovered: 141,\r\n        //     collectionPer: 47,\r\n        //     segPer: 70\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 6,\r\n        //     totalPropertyUnits: 250,\r\n        //     noOfPropertiesCovered: 123,\r\n        //     collectionPer: 49,\r\n        //     segPer: 78\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 7,\r\n        //     totalPropertyUnits: 400,\r\n        //     noOfPropertiesCovered: 208,\r\n        //     collectionPer: 52,\r\n        //     segPer: 44\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 8,\r\n        //     totalPropertyUnits: 270,\r\n        //     noOfPropertiesCovered: 146,\r\n        //     collectionPer: 54,\r\n        //     segPer: 89\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 9,\r\n        //     totalPropertyUnits: 300,\r\n        //     noOfPropertiesCovered: 213,\r\n        //     collectionPer: 71,\r\n        //     segPer: 70\r\n        //   },\r\n        //   {\r\n        //     wardNumber: 10,\r\n        //     totalPropertyUnits: 380,\r\n        //     noOfPropertiesCovered: 304,\r\n        //     collectionPer: 80,\r\n        //     segPer: 91\r\n        //   }\r\n        // ],\r\n        // collectionDate: new Date(),\r\n        // blocking: false,\r\n        // loaderType: \"ball-triangle-path\",\r\n        // months: [\r\n        //   \"Jan\",\r\n        //   \"Feb\",\r\n        //   \"Mar\",\r\n        //   \"Apr\",\r\n        //   \"May\",\r\n        //   \"Jun\",\r\n        //   \"Jul\",\r\n        //   \"Aug\",\r\n        //   \"Sep\",\r\n        //   \"Oct\",\r\n        //   \"Nov\",\r\n        //   \"Dec\"\r\n        // ],\r\n        // selectedMonth: \"August\",\r\n        // sweetalertMessage: \"\",\r\n        // sweetalertShow: false,\r\n        // sweetalertType: \"\",\r\n        // collectionStartDate: new Date(),\r\n        // collectionEndDate: new Date()\r\n      };\r\n\r\n  componentDidMount() {\r\n    // workbook.xlsx.writeBuffer().then(function (data) {\r\n    //     const blob = new Blob([data],\r\n    //       { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    //     const url = window.URL.createObjectURL(blob);\r\n    //     const anchor = document.createElement('a');\r\n    //     anchor.href = url;\r\n    //     anchor.download = 'download.xls';\r\n    //     anchor.click();\r\n    //     window.URL.revokeObjectURL(url);\r\n    //   });\r\n    axios.get(\"https://jsonplaceholder.typicode.com/todos\")\r\n    .then(res => {\r\n        console.log(res);\r\n        this.setState({data: res.data});\r\n    })\r\n  }\r\n\r\n  downloadExcel = () => {\r\n    var workbook = new ExcelJS.Workbook();\r\n\r\n    workbook.creator = \"Paul Leger\";\r\n    workbook.lastModifiedBy = \"Paul Leger\";\r\n    workbook.created = new Date();\r\n    workbook.modified = new Date();\r\n    workbook.lastPrinted = new Date();\r\n\r\n    var worksheet = workbook.addWorksheet(\"Publications\");\r\n    worksheet.views = [{ state: \"frozen\", xSplit: 0, ySplit: 1 }];\r\n    worksheet.columns = [\r\n        { header: 'Ward Number', key: 'id', width: 15 },\r\n        { header: 'Total Property Units', key: 'userId', width: 15 },\r\n        { header: 'No. of Propertes Covered', key: 'title', width: 50 },\r\n        { header: 'Collection Percentage', key: 'completed', width: 25 }\r\n    ];\r\n\r\n    ['A1', 'B1', 'C1', 'D1'].map(key => {\r\n        worksheet.getCell(key).fill = {\r\n            type: 'pattern',\r\n            pattern:'solid',\r\n            fgColor: { argb: 'FFD6D6D6' },\r\n            bgColor: { argb: 'FFD6D6D6' }\r\n        };\r\n    }); \r\n\r\n    // worksheet.addRow(\r\n    //   { package_name: \"ABC\", author_name: \"Author 1\" },\r\n    //   { package_name: \"XYZ\", author_name: \"Author 2\" }\r\n    // );\r\n\r\n    // Add rows as Array values\r\n    // worksheet.addRow([\"BCD\", \"Author Name 3\"]);\r\n\r\n    // Add rows using both the above of rows\r\n    // const rows = [\r\n    //   [\"FGH\", \"Author Name 4\"],\r\n    //   { package_name: \"PQR\", author_name: \"Author 5\" }\r\n    // ];\r\n\r\n    worksheet.addRows(this.state.data);\r\n\r\n    let rowlast = worksheet.lastRow; \r\n    console.log(rowlast);\r\n    rowlast.eachCell({ includeEmpty: false }, function(cell, colNumber) {\r\n       \r\n                    cell.fill = {\r\n                        type: 'pattern',\r\n                        pattern:'solid',\r\n                        fgColor:{ argb:'009d0b'}\r\n                    };\r\n              \r\n                 \r\n\r\n                cell.border = {\r\n                    top: { style: 'thin' },\r\n                    left: { style: 'thin' },\r\n                    bottom: { style: 'thin' },\r\n                    right: { style: 'thin' }\r\n                    }; \r\n           \r\n\r\n    }); \r\n\r\n    var buff = workbook.xlsx.writeBuffer().then(function(data) {\r\n      var blob = new Blob([data], {\r\n        type:\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n      });\r\n      var fileName = \"Pulications_\" + Math.floor(new Date() / 1000) + '.xlsx';\r\n      saveAs(blob, fileName);\r\n    });\r\n  }\r\n  render() {\r\n      console.log(this.state);\r\n    return <button onClick={this.downloadExcel}>Download</button>\r\n  }\r\n}\r\n\r\nexport default ExceljsReact;\r\n","import React from 'react';\nimport ReactCSV from './test';\nimport ExceljsReact from './test2';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <ReactCSV/> */}\n      <ExceljsReact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}